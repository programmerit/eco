/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.com.ecopharma.emp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.com.ecopharma.emp.model.Certificate;
import vn.com.ecopharma.emp.model.CertificateModel;
import vn.com.ecopharma.emp.model.CertificateSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Certificate service. Represents a row in the &quot;eco_em_portlet_Certificate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.emp.model.CertificateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CertificateImpl}.
 * </p>
 *
 * @author tvt
 * @see CertificateImpl
 * @see vn.com.ecopharma.emp.model.Certificate
 * @see vn.com.ecopharma.emp.model.CertificateModel
 * @generated
 */
@JSON(strict = true)
public class CertificateModelImpl extends BaseModelImpl<Certificate>
	implements CertificateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a certificate model instance should use the {@link vn.com.ecopharma.emp.model.Certificate} interface instead.
	 */
	public static final String TABLE_NAME = "eco_em_portlet_Certificate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "certificateId", Types.BIGINT },
			{ "className", Types.VARCHAR },
			{ "classPK", Types.BIGINT },
			{ "education", Types.VARCHAR },
			{ "certificateType", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "specialize", Types.VARCHAR },
			{ "coursePlace", Types.BIGINT },
			{ "graduatedYear", Types.TIMESTAMP },
			{ "grade", Types.VARCHAR },
			{ "courseType", Types.VARCHAR },
			{ "expiredDate", Types.TIMESTAMP },
			{ "issuedPlace", Types.VARCHAR },
			{ "note", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table eco_em_portlet_Certificate (certificateId LONG not null primary key,className VARCHAR(75) null,classPK LONG,education VARCHAR(75) null,certificateType VARCHAR(75) null,name VARCHAR(75) null,specialize VARCHAR(75) null,coursePlace LONG,graduatedYear DATE null,grade VARCHAR(75) null,courseType VARCHAR(75) null,expiredDate DATE null,issuedPlace VARCHAR(75) null,note VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table eco_em_portlet_Certificate";
	public static final String ORDER_BY_JPQL = " ORDER BY certificate.certificateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eco_em_portlet_Certificate.certificateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.com.ecopharma.emp.model.Certificate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.com.ecopharma.emp.model.Certificate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.com.ecopharma.emp.model.Certificate"),
			true);
	public static long CERTIFICATETYPE_COLUMN_BITMASK = 1L;
	public static long CLASSNAME_COLUMN_BITMASK = 2L;
	public static long CLASSPK_COLUMN_BITMASK = 4L;
	public static long CERTIFICATEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Certificate toModel(CertificateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Certificate model = new CertificateImpl();

		model.setCertificateId(soapModel.getCertificateId());
		model.setClassName(soapModel.getClassName());
		model.setClassPK(soapModel.getClassPK());
		model.setEducation(soapModel.getEducation());
		model.setCertificateType(soapModel.getCertificateType());
		model.setName(soapModel.getName());
		model.setSpecialize(soapModel.getSpecialize());
		model.setCoursePlace(soapModel.getCoursePlace());
		model.setGraduatedYear(soapModel.getGraduatedYear());
		model.setGrade(soapModel.getGrade());
		model.setCourseType(soapModel.getCourseType());
		model.setExpiredDate(soapModel.getExpiredDate());
		model.setIssuedPlace(soapModel.getIssuedPlace());
		model.setNote(soapModel.getNote());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Certificate> toModels(CertificateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Certificate> models = new ArrayList<Certificate>(soapModels.length);

		for (CertificateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.com.ecopharma.emp.model.Certificate"));

	public CertificateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _certificateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCertificateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _certificateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Certificate.class;
	}

	@Override
	public String getModelClassName() {
		return Certificate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("certificateId", getCertificateId());
		attributes.put("className", getClassName());
		attributes.put("classPK", getClassPK());
		attributes.put("education", getEducation());
		attributes.put("certificateType", getCertificateType());
		attributes.put("name", getName());
		attributes.put("specialize", getSpecialize());
		attributes.put("coursePlace", getCoursePlace());
		attributes.put("graduatedYear", getGraduatedYear());
		attributes.put("grade", getGrade());
		attributes.put("courseType", getCourseType());
		attributes.put("expiredDate", getExpiredDate());
		attributes.put("issuedPlace", getIssuedPlace());
		attributes.put("note", getNote());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long certificateId = (Long)attributes.get("certificateId");

		if (certificateId != null) {
			setCertificateId(certificateId);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String education = (String)attributes.get("education");

		if (education != null) {
			setEducation(education);
		}

		String certificateType = (String)attributes.get("certificateType");

		if (certificateType != null) {
			setCertificateType(certificateType);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String specialize = (String)attributes.get("specialize");

		if (specialize != null) {
			setSpecialize(specialize);
		}

		Long coursePlace = (Long)attributes.get("coursePlace");

		if (coursePlace != null) {
			setCoursePlace(coursePlace);
		}

		Date graduatedYear = (Date)attributes.get("graduatedYear");

		if (graduatedYear != null) {
			setGraduatedYear(graduatedYear);
		}

		String grade = (String)attributes.get("grade");

		if (grade != null) {
			setGrade(grade);
		}

		String courseType = (String)attributes.get("courseType");

		if (courseType != null) {
			setCourseType(courseType);
		}

		Date expiredDate = (Date)attributes.get("expiredDate");

		if (expiredDate != null) {
			setExpiredDate(expiredDate);
		}

		String issuedPlace = (String)attributes.get("issuedPlace");

		if (issuedPlace != null) {
			setIssuedPlace(issuedPlace);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getCertificateId() {
		return _certificateId;
	}

	@Override
	public void setCertificateId(long certificateId) {
		_certificateId = certificateId;
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassName == null) {
			_originalClassName = _className;
		}

		_className = className;
	}

	public String getOriginalClassName() {
		return GetterUtil.getString(_originalClassName);
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@JSON
	@Override
	public String getEducation() {
		if (_education == null) {
			return StringPool.BLANK;
		}
		else {
			return _education;
		}
	}

	@Override
	public void setEducation(String education) {
		_education = education;
	}

	@JSON
	@Override
	public String getCertificateType() {
		if (_certificateType == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateType;
		}
	}

	@Override
	public void setCertificateType(String certificateType) {
		_columnBitmask |= CERTIFICATETYPE_COLUMN_BITMASK;

		if (_originalCertificateType == null) {
			_originalCertificateType = _certificateType;
		}

		_certificateType = certificateType;
	}

	public String getOriginalCertificateType() {
		return GetterUtil.getString(_originalCertificateType);
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getSpecialize() {
		if (_specialize == null) {
			return StringPool.BLANK;
		}
		else {
			return _specialize;
		}
	}

	@Override
	public void setSpecialize(String specialize) {
		_specialize = specialize;
	}

	@JSON
	@Override
	public long getCoursePlace() {
		return _coursePlace;
	}

	@Override
	public void setCoursePlace(long coursePlace) {
		_coursePlace = coursePlace;
	}

	@JSON
	@Override
	public Date getGraduatedYear() {
		return _graduatedYear;
	}

	@Override
	public void setGraduatedYear(Date graduatedYear) {
		_graduatedYear = graduatedYear;
	}

	@JSON
	@Override
	public String getGrade() {
		if (_grade == null) {
			return StringPool.BLANK;
		}
		else {
			return _grade;
		}
	}

	@Override
	public void setGrade(String grade) {
		_grade = grade;
	}

	@JSON
	@Override
	public String getCourseType() {
		if (_courseType == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseType;
		}
	}

	@Override
	public void setCourseType(String courseType) {
		_courseType = courseType;
	}

	@JSON
	@Override
	public Date getExpiredDate() {
		return _expiredDate;
	}

	@Override
	public void setExpiredDate(Date expiredDate) {
		_expiredDate = expiredDate;
	}

	@JSON
	@Override
	public String getIssuedPlace() {
		if (_issuedPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _issuedPlace;
		}
	}

	@Override
	public void setIssuedPlace(String issuedPlace) {
		_issuedPlace = issuedPlace;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Certificate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Certificate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Certificate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CertificateImpl certificateImpl = new CertificateImpl();

		certificateImpl.setCertificateId(getCertificateId());
		certificateImpl.setClassName(getClassName());
		certificateImpl.setClassPK(getClassPK());
		certificateImpl.setEducation(getEducation());
		certificateImpl.setCertificateType(getCertificateType());
		certificateImpl.setName(getName());
		certificateImpl.setSpecialize(getSpecialize());
		certificateImpl.setCoursePlace(getCoursePlace());
		certificateImpl.setGraduatedYear(getGraduatedYear());
		certificateImpl.setGrade(getGrade());
		certificateImpl.setCourseType(getCourseType());
		certificateImpl.setExpiredDate(getExpiredDate());
		certificateImpl.setIssuedPlace(getIssuedPlace());
		certificateImpl.setNote(getNote());
		certificateImpl.setGroupId(getGroupId());
		certificateImpl.setCompanyId(getCompanyId());
		certificateImpl.setUserId(getUserId());
		certificateImpl.setUserName(getUserName());
		certificateImpl.setCreateDate(getCreateDate());
		certificateImpl.setModifiedDate(getModifiedDate());

		certificateImpl.resetOriginalValues();

		return certificateImpl;
	}

	@Override
	public int compareTo(Certificate certificate) {
		long primaryKey = certificate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Certificate)) {
			return false;
		}

		Certificate certificate = (Certificate)obj;

		long primaryKey = certificate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CertificateModelImpl certificateModelImpl = this;

		certificateModelImpl._originalClassName = certificateModelImpl._className;

		certificateModelImpl._originalClassPK = certificateModelImpl._classPK;

		certificateModelImpl._setOriginalClassPK = false;

		certificateModelImpl._originalCertificateType = certificateModelImpl._certificateType;

		certificateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Certificate> toCacheModel() {
		CertificateCacheModel certificateCacheModel = new CertificateCacheModel();

		certificateCacheModel.certificateId = getCertificateId();

		certificateCacheModel.className = getClassName();

		String className = certificateCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			certificateCacheModel.className = null;
		}

		certificateCacheModel.classPK = getClassPK();

		certificateCacheModel.education = getEducation();

		String education = certificateCacheModel.education;

		if ((education != null) && (education.length() == 0)) {
			certificateCacheModel.education = null;
		}

		certificateCacheModel.certificateType = getCertificateType();

		String certificateType = certificateCacheModel.certificateType;

		if ((certificateType != null) && (certificateType.length() == 0)) {
			certificateCacheModel.certificateType = null;
		}

		certificateCacheModel.name = getName();

		String name = certificateCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			certificateCacheModel.name = null;
		}

		certificateCacheModel.specialize = getSpecialize();

		String specialize = certificateCacheModel.specialize;

		if ((specialize != null) && (specialize.length() == 0)) {
			certificateCacheModel.specialize = null;
		}

		certificateCacheModel.coursePlace = getCoursePlace();

		Date graduatedYear = getGraduatedYear();

		if (graduatedYear != null) {
			certificateCacheModel.graduatedYear = graduatedYear.getTime();
		}
		else {
			certificateCacheModel.graduatedYear = Long.MIN_VALUE;
		}

		certificateCacheModel.grade = getGrade();

		String grade = certificateCacheModel.grade;

		if ((grade != null) && (grade.length() == 0)) {
			certificateCacheModel.grade = null;
		}

		certificateCacheModel.courseType = getCourseType();

		String courseType = certificateCacheModel.courseType;

		if ((courseType != null) && (courseType.length() == 0)) {
			certificateCacheModel.courseType = null;
		}

		Date expiredDate = getExpiredDate();

		if (expiredDate != null) {
			certificateCacheModel.expiredDate = expiredDate.getTime();
		}
		else {
			certificateCacheModel.expiredDate = Long.MIN_VALUE;
		}

		certificateCacheModel.issuedPlace = getIssuedPlace();

		String issuedPlace = certificateCacheModel.issuedPlace;

		if ((issuedPlace != null) && (issuedPlace.length() == 0)) {
			certificateCacheModel.issuedPlace = null;
		}

		certificateCacheModel.note = getNote();

		String note = certificateCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			certificateCacheModel.note = null;
		}

		certificateCacheModel.groupId = getGroupId();

		certificateCacheModel.companyId = getCompanyId();

		certificateCacheModel.userId = getUserId();

		certificateCacheModel.userName = getUserName();

		String userName = certificateCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			certificateCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			certificateCacheModel.createDate = createDate.getTime();
		}
		else {
			certificateCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			certificateCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			certificateCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return certificateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{certificateId=");
		sb.append(getCertificateId());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", education=");
		sb.append(getEducation());
		sb.append(", certificateType=");
		sb.append(getCertificateType());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", specialize=");
		sb.append(getSpecialize());
		sb.append(", coursePlace=");
		sb.append(getCoursePlace());
		sb.append(", graduatedYear=");
		sb.append(getGraduatedYear());
		sb.append(", grade=");
		sb.append(getGrade());
		sb.append(", courseType=");
		sb.append(getCourseType());
		sb.append(", expiredDate=");
		sb.append(getExpiredDate());
		sb.append(", issuedPlace=");
		sb.append(getIssuedPlace());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("vn.com.ecopharma.emp.model.Certificate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>certificateId</column-name><column-value><![CDATA[");
		sb.append(getCertificateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>education</column-name><column-value><![CDATA[");
		sb.append(getEducation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateType</column-name><column-value><![CDATA[");
		sb.append(getCertificateType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specialize</column-name><column-value><![CDATA[");
		sb.append(getSpecialize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coursePlace</column-name><column-value><![CDATA[");
		sb.append(getCoursePlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>graduatedYear</column-name><column-value><![CDATA[");
		sb.append(getGraduatedYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grade</column-name><column-value><![CDATA[");
		sb.append(getGrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseType</column-name><column-value><![CDATA[");
		sb.append(getCourseType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredDate</column-name><column-value><![CDATA[");
		sb.append(getExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuedPlace</column-name><column-value><![CDATA[");
		sb.append(getIssuedPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Certificate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Certificate.class
		};
	private long _certificateId;
	private String _className;
	private String _originalClassName;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private String _education;
	private String _certificateType;
	private String _originalCertificateType;
	private String _name;
	private String _specialize;
	private long _coursePlace;
	private Date _graduatedYear;
	private String _grade;
	private String _courseType;
	private Date _expiredDate;
	private String _issuedPlace;
	private String _note;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private Certificate _escapedModel;
}