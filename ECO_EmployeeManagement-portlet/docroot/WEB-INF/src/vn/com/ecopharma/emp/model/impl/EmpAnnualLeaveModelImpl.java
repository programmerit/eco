/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.com.ecopharma.emp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.com.ecopharma.emp.model.EmpAnnualLeave;
import vn.com.ecopharma.emp.model.EmpAnnualLeaveModel;
import vn.com.ecopharma.emp.model.EmpAnnualLeaveSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmpAnnualLeave service. Represents a row in the &quot;eco_em_portlet_EmpAnnualLeave&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.emp.model.EmpAnnualLeaveModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmpAnnualLeaveImpl}.
 * </p>
 *
 * @author tvt
 * @see EmpAnnualLeaveImpl
 * @see vn.com.ecopharma.emp.model.EmpAnnualLeave
 * @see vn.com.ecopharma.emp.model.EmpAnnualLeaveModel
 * @generated
 */
@JSON(strict = true)
public class EmpAnnualLeaveModelImpl extends BaseModelImpl<EmpAnnualLeave>
	implements EmpAnnualLeaveModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a emp annual leave model instance should use the {@link vn.com.ecopharma.emp.model.EmpAnnualLeave} interface instead.
	 */
	public static final String TABLE_NAME = "eco_em_portlet_EmpAnnualLeave";
	public static final Object[][] TABLE_COLUMNS = {
			{ "empAnnualLeaveId", Types.BIGINT },
			{ "empId", Types.BIGINT },
			{ "totalAnualLeaveLeft", Types.DOUBLE },
			{ "totalAnnualLeave", Types.DOUBLE },
			{ "totalPreviousYearLeavesLeft", Types.DOUBLE },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table eco_em_portlet_EmpAnnualLeave (empAnnualLeaveId LONG not null primary key,empId LONG,totalAnualLeaveLeft DOUBLE,totalAnnualLeave DOUBLE,totalPreviousYearLeavesLeft DOUBLE,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table eco_em_portlet_EmpAnnualLeave";
	public static final String ORDER_BY_JPQL = " ORDER BY empAnnualLeave.empAnnualLeaveId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eco_em_portlet_EmpAnnualLeave.empAnnualLeaveId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.com.ecopharma.emp.model.EmpAnnualLeave"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.com.ecopharma.emp.model.EmpAnnualLeave"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.com.ecopharma.emp.model.EmpAnnualLeave"),
			true);
	public static long EMPID_COLUMN_BITMASK = 1L;
	public static long EMPANNUALLEAVEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmpAnnualLeave toModel(EmpAnnualLeaveSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmpAnnualLeave model = new EmpAnnualLeaveImpl();

		model.setEmpAnnualLeaveId(soapModel.getEmpAnnualLeaveId());
		model.setEmpId(soapModel.getEmpId());
		model.setTotalAnualLeaveLeft(soapModel.getTotalAnualLeaveLeft());
		model.setTotalAnnualLeave(soapModel.getTotalAnnualLeave());
		model.setTotalPreviousYearLeavesLeft(soapModel.getTotalPreviousYearLeavesLeft());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmpAnnualLeave> toModels(EmpAnnualLeaveSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmpAnnualLeave> models = new ArrayList<EmpAnnualLeave>(soapModels.length);

		for (EmpAnnualLeaveSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.com.ecopharma.emp.model.EmpAnnualLeave"));

	public EmpAnnualLeaveModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _empAnnualLeaveId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmpAnnualLeaveId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _empAnnualLeaveId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmpAnnualLeave.class;
	}

	@Override
	public String getModelClassName() {
		return EmpAnnualLeave.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("empAnnualLeaveId", getEmpAnnualLeaveId());
		attributes.put("empId", getEmpId());
		attributes.put("totalAnualLeaveLeft", getTotalAnualLeaveLeft());
		attributes.put("totalAnnualLeave", getTotalAnnualLeave());
		attributes.put("totalPreviousYearLeavesLeft",
			getTotalPreviousYearLeavesLeft());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long empAnnualLeaveId = (Long)attributes.get("empAnnualLeaveId");

		if (empAnnualLeaveId != null) {
			setEmpAnnualLeaveId(empAnnualLeaveId);
		}

		Long empId = (Long)attributes.get("empId");

		if (empId != null) {
			setEmpId(empId);
		}

		Double totalAnualLeaveLeft = (Double)attributes.get(
				"totalAnualLeaveLeft");

		if (totalAnualLeaveLeft != null) {
			setTotalAnualLeaveLeft(totalAnualLeaveLeft);
		}

		Double totalAnnualLeave = (Double)attributes.get("totalAnnualLeave");

		if (totalAnnualLeave != null) {
			setTotalAnnualLeave(totalAnnualLeave);
		}

		Double totalPreviousYearLeavesLeft = (Double)attributes.get(
				"totalPreviousYearLeavesLeft");

		if (totalPreviousYearLeavesLeft != null) {
			setTotalPreviousYearLeavesLeft(totalPreviousYearLeavesLeft);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getEmpAnnualLeaveId() {
		return _empAnnualLeaveId;
	}

	@Override
	public void setEmpAnnualLeaveId(long empAnnualLeaveId) {
		_empAnnualLeaveId = empAnnualLeaveId;
	}

	@JSON
	@Override
	public long getEmpId() {
		return _empId;
	}

	@Override
	public void setEmpId(long empId) {
		_columnBitmask |= EMPID_COLUMN_BITMASK;

		if (!_setOriginalEmpId) {
			_setOriginalEmpId = true;

			_originalEmpId = _empId;
		}

		_empId = empId;
	}

	public long getOriginalEmpId() {
		return _originalEmpId;
	}

	@JSON
	@Override
	public double getTotalAnualLeaveLeft() {
		return _totalAnualLeaveLeft;
	}

	@Override
	public void setTotalAnualLeaveLeft(double totalAnualLeaveLeft) {
		_totalAnualLeaveLeft = totalAnualLeaveLeft;
	}

	@JSON
	@Override
	public double getTotalAnnualLeave() {
		return _totalAnnualLeave;
	}

	@Override
	public void setTotalAnnualLeave(double totalAnnualLeave) {
		_totalAnnualLeave = totalAnnualLeave;
	}

	@JSON
	@Override
	public double getTotalPreviousYearLeavesLeft() {
		return _totalPreviousYearLeavesLeft;
	}

	@Override
	public void setTotalPreviousYearLeavesLeft(
		double totalPreviousYearLeavesLeft) {
		_totalPreviousYearLeavesLeft = totalPreviousYearLeavesLeft;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EmpAnnualLeave.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmpAnnualLeave toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmpAnnualLeave)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmpAnnualLeaveImpl empAnnualLeaveImpl = new EmpAnnualLeaveImpl();

		empAnnualLeaveImpl.setEmpAnnualLeaveId(getEmpAnnualLeaveId());
		empAnnualLeaveImpl.setEmpId(getEmpId());
		empAnnualLeaveImpl.setTotalAnualLeaveLeft(getTotalAnualLeaveLeft());
		empAnnualLeaveImpl.setTotalAnnualLeave(getTotalAnnualLeave());
		empAnnualLeaveImpl.setTotalPreviousYearLeavesLeft(getTotalPreviousYearLeavesLeft());
		empAnnualLeaveImpl.setGroupId(getGroupId());
		empAnnualLeaveImpl.setCompanyId(getCompanyId());
		empAnnualLeaveImpl.setUserId(getUserId());
		empAnnualLeaveImpl.setUserName(getUserName());
		empAnnualLeaveImpl.setCreateDate(getCreateDate());
		empAnnualLeaveImpl.setModifiedDate(getModifiedDate());

		empAnnualLeaveImpl.resetOriginalValues();

		return empAnnualLeaveImpl;
	}

	@Override
	public int compareTo(EmpAnnualLeave empAnnualLeave) {
		long primaryKey = empAnnualLeave.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmpAnnualLeave)) {
			return false;
		}

		EmpAnnualLeave empAnnualLeave = (EmpAnnualLeave)obj;

		long primaryKey = empAnnualLeave.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmpAnnualLeaveModelImpl empAnnualLeaveModelImpl = this;

		empAnnualLeaveModelImpl._originalEmpId = empAnnualLeaveModelImpl._empId;

		empAnnualLeaveModelImpl._setOriginalEmpId = false;

		empAnnualLeaveModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmpAnnualLeave> toCacheModel() {
		EmpAnnualLeaveCacheModel empAnnualLeaveCacheModel = new EmpAnnualLeaveCacheModel();

		empAnnualLeaveCacheModel.empAnnualLeaveId = getEmpAnnualLeaveId();

		empAnnualLeaveCacheModel.empId = getEmpId();

		empAnnualLeaveCacheModel.totalAnualLeaveLeft = getTotalAnualLeaveLeft();

		empAnnualLeaveCacheModel.totalAnnualLeave = getTotalAnnualLeave();

		empAnnualLeaveCacheModel.totalPreviousYearLeavesLeft = getTotalPreviousYearLeavesLeft();

		empAnnualLeaveCacheModel.groupId = getGroupId();

		empAnnualLeaveCacheModel.companyId = getCompanyId();

		empAnnualLeaveCacheModel.userId = getUserId();

		empAnnualLeaveCacheModel.userName = getUserName();

		String userName = empAnnualLeaveCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			empAnnualLeaveCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			empAnnualLeaveCacheModel.createDate = createDate.getTime();
		}
		else {
			empAnnualLeaveCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			empAnnualLeaveCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			empAnnualLeaveCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return empAnnualLeaveCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{empAnnualLeaveId=");
		sb.append(getEmpAnnualLeaveId());
		sb.append(", empId=");
		sb.append(getEmpId());
		sb.append(", totalAnualLeaveLeft=");
		sb.append(getTotalAnualLeaveLeft());
		sb.append(", totalAnnualLeave=");
		sb.append(getTotalAnnualLeave());
		sb.append(", totalPreviousYearLeavesLeft=");
		sb.append(getTotalPreviousYearLeavesLeft());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("vn.com.ecopharma.emp.model.EmpAnnualLeave");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>empAnnualLeaveId</column-name><column-value><![CDATA[");
		sb.append(getEmpAnnualLeaveId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>empId</column-name><column-value><![CDATA[");
		sb.append(getEmpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalAnualLeaveLeft</column-name><column-value><![CDATA[");
		sb.append(getTotalAnualLeaveLeft());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalAnnualLeave</column-name><column-value><![CDATA[");
		sb.append(getTotalAnnualLeave());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPreviousYearLeavesLeft</column-name><column-value><![CDATA[");
		sb.append(getTotalPreviousYearLeavesLeft());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmpAnnualLeave.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmpAnnualLeave.class
		};
	private long _empAnnualLeaveId;
	private long _empId;
	private long _originalEmpId;
	private boolean _setOriginalEmpId;
	private double _totalAnualLeaveLeft;
	private double _totalAnnualLeave;
	private double _totalPreviousYearLeavesLeft;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private EmpAnnualLeave _escapedModel;
}