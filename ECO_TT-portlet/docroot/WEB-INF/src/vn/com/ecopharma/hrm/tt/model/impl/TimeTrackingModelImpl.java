/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.com.ecopharma.hrm.tt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.com.ecopharma.hrm.tt.model.TimeTracking;
import vn.com.ecopharma.hrm.tt.model.TimeTrackingModel;
import vn.com.ecopharma.hrm.tt.model.TimeTrackingSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TimeTracking service. Represents a row in the &quot;eco_ttp_TimeTracking&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.tt.model.TimeTrackingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TimeTrackingImpl}.
 * </p>
 *
 * @author tvt
 * @see TimeTrackingImpl
 * @see vn.com.ecopharma.hrm.tt.model.TimeTracking
 * @see vn.com.ecopharma.hrm.tt.model.TimeTrackingModel
 * @generated
 */
@JSON(strict = true)
public class TimeTrackingModelImpl extends BaseModelImpl<TimeTracking>
	implements TimeTrackingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a time tracking model instance should use the {@link vn.com.ecopharma.hrm.tt.model.TimeTracking} interface instead.
	 */
	public static final String TABLE_NAME = "eco_ttp_TimeTracking";
	public static final Object[][] TABLE_COLUMNS = {
			{ "timeTrackingId", Types.BIGINT },
			{ "empId", Types.BIGINT },
			{ "date_", Types.TIMESTAMP },
			{ "in1", Types.TIMESTAMP },
			{ "out1", Types.TIMESTAMP },
			{ "in2", Types.TIMESTAMP },
			{ "out2", Types.TIMESTAMP },
			{ "in3", Types.TIMESTAMP },
			{ "out3", Types.TIMESTAMP },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "leaveRefId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table eco_ttp_TimeTracking (timeTrackingId LONG not null primary key,empId LONG,date_ DATE null,in1 DATE null,out1 DATE null,in2 DATE null,out2 DATE null,in3 DATE null,out3 DATE null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,leaveRefId LONG)";
	public static final String TABLE_SQL_DROP = "drop table eco_ttp_TimeTracking";
	public static final String ORDER_BY_JPQL = " ORDER BY timeTracking.timeTrackingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eco_ttp_TimeTracking.timeTrackingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.com.ecopharma.hrm.tt.model.TimeTracking"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.com.ecopharma.hrm.tt.model.TimeTracking"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.com.ecopharma.hrm.tt.model.TimeTracking"),
			true);
	public static long DATE_COLUMN_BITMASK = 1L;
	public static long EMPID_COLUMN_BITMASK = 2L;
	public static long LEAVEREFID_COLUMN_BITMASK = 4L;
	public static long TIMETRACKINGID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TimeTracking toModel(TimeTrackingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TimeTracking model = new TimeTrackingImpl();

		model.setTimeTrackingId(soapModel.getTimeTrackingId());
		model.setEmpId(soapModel.getEmpId());
		model.setDate(soapModel.getDate());
		model.setIn1(soapModel.getIn1());
		model.setOut1(soapModel.getOut1());
		model.setIn2(soapModel.getIn2());
		model.setOut2(soapModel.getOut2());
		model.setIn3(soapModel.getIn3());
		model.setOut3(soapModel.getOut3());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLeaveRefId(soapModel.getLeaveRefId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TimeTracking> toModels(TimeTrackingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TimeTracking> models = new ArrayList<TimeTracking>(soapModels.length);

		for (TimeTrackingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.com.ecopharma.hrm.tt.model.TimeTracking"));

	public TimeTrackingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _timeTrackingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTimeTrackingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _timeTrackingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TimeTracking.class;
	}

	@Override
	public String getModelClassName() {
		return TimeTracking.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("timeTrackingId", getTimeTrackingId());
		attributes.put("empId", getEmpId());
		attributes.put("date", getDate());
		attributes.put("in1", getIn1());
		attributes.put("out1", getOut1());
		attributes.put("in2", getIn2());
		attributes.put("out2", getOut2());
		attributes.put("in3", getIn3());
		attributes.put("out3", getOut3());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("leaveRefId", getLeaveRefId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long timeTrackingId = (Long)attributes.get("timeTrackingId");

		if (timeTrackingId != null) {
			setTimeTrackingId(timeTrackingId);
		}

		Long empId = (Long)attributes.get("empId");

		if (empId != null) {
			setEmpId(empId);
		}

		Date date = (Date)attributes.get("date");

		if (date != null) {
			setDate(date);
		}

		Date in1 = (Date)attributes.get("in1");

		if (in1 != null) {
			setIn1(in1);
		}

		Date out1 = (Date)attributes.get("out1");

		if (out1 != null) {
			setOut1(out1);
		}

		Date in2 = (Date)attributes.get("in2");

		if (in2 != null) {
			setIn2(in2);
		}

		Date out2 = (Date)attributes.get("out2");

		if (out2 != null) {
			setOut2(out2);
		}

		Date in3 = (Date)attributes.get("in3");

		if (in3 != null) {
			setIn3(in3);
		}

		Date out3 = (Date)attributes.get("out3");

		if (out3 != null) {
			setOut3(out3);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long leaveRefId = (Long)attributes.get("leaveRefId");

		if (leaveRefId != null) {
			setLeaveRefId(leaveRefId);
		}
	}

	@JSON
	@Override
	public long getTimeTrackingId() {
		return _timeTrackingId;
	}

	@Override
	public void setTimeTrackingId(long timeTrackingId) {
		_timeTrackingId = timeTrackingId;
	}

	@JSON
	@Override
	public long getEmpId() {
		return _empId;
	}

	@Override
	public void setEmpId(long empId) {
		_columnBitmask |= EMPID_COLUMN_BITMASK;

		if (!_setOriginalEmpId) {
			_setOriginalEmpId = true;

			_originalEmpId = _empId;
		}

		_empId = empId;
	}

	public long getOriginalEmpId() {
		return _originalEmpId;
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_columnBitmask |= DATE_COLUMN_BITMASK;

		if (_originalDate == null) {
			_originalDate = _date;
		}

		_date = date;
	}

	public Date getOriginalDate() {
		return _originalDate;
	}

	@JSON
	@Override
	public Date getIn1() {
		return _in1;
	}

	@Override
	public void setIn1(Date in1) {
		_in1 = in1;
	}

	@JSON
	@Override
	public Date getOut1() {
		return _out1;
	}

	@Override
	public void setOut1(Date out1) {
		_out1 = out1;
	}

	@JSON
	@Override
	public Date getIn2() {
		return _in2;
	}

	@Override
	public void setIn2(Date in2) {
		_in2 = in2;
	}

	@JSON
	@Override
	public Date getOut2() {
		return _out2;
	}

	@Override
	public void setOut2(Date out2) {
		_out2 = out2;
	}

	@JSON
	@Override
	public Date getIn3() {
		return _in3;
	}

	@Override
	public void setIn3(Date in3) {
		_in3 = in3;
	}

	@JSON
	@Override
	public Date getOut3() {
		return _out3;
	}

	@Override
	public void setOut3(Date out3) {
		_out3 = out3;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getLeaveRefId() {
		return _leaveRefId;
	}

	@Override
	public void setLeaveRefId(long leaveRefId) {
		_columnBitmask |= LEAVEREFID_COLUMN_BITMASK;

		if (!_setOriginalLeaveRefId) {
			_setOriginalLeaveRefId = true;

			_originalLeaveRefId = _leaveRefId;
		}

		_leaveRefId = leaveRefId;
	}

	public long getOriginalLeaveRefId() {
		return _originalLeaveRefId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TimeTracking.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TimeTracking toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TimeTracking)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TimeTrackingImpl timeTrackingImpl = new TimeTrackingImpl();

		timeTrackingImpl.setTimeTrackingId(getTimeTrackingId());
		timeTrackingImpl.setEmpId(getEmpId());
		timeTrackingImpl.setDate(getDate());
		timeTrackingImpl.setIn1(getIn1());
		timeTrackingImpl.setOut1(getOut1());
		timeTrackingImpl.setIn2(getIn2());
		timeTrackingImpl.setOut2(getOut2());
		timeTrackingImpl.setIn3(getIn3());
		timeTrackingImpl.setOut3(getOut3());
		timeTrackingImpl.setGroupId(getGroupId());
		timeTrackingImpl.setCompanyId(getCompanyId());
		timeTrackingImpl.setUserId(getUserId());
		timeTrackingImpl.setUserName(getUserName());
		timeTrackingImpl.setCreateDate(getCreateDate());
		timeTrackingImpl.setModifiedDate(getModifiedDate());
		timeTrackingImpl.setLeaveRefId(getLeaveRefId());

		timeTrackingImpl.resetOriginalValues();

		return timeTrackingImpl;
	}

	@Override
	public int compareTo(TimeTracking timeTracking) {
		long primaryKey = timeTracking.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TimeTracking)) {
			return false;
		}

		TimeTracking timeTracking = (TimeTracking)obj;

		long primaryKey = timeTracking.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TimeTrackingModelImpl timeTrackingModelImpl = this;

		timeTrackingModelImpl._originalEmpId = timeTrackingModelImpl._empId;

		timeTrackingModelImpl._setOriginalEmpId = false;

		timeTrackingModelImpl._originalDate = timeTrackingModelImpl._date;

		timeTrackingModelImpl._originalLeaveRefId = timeTrackingModelImpl._leaveRefId;

		timeTrackingModelImpl._setOriginalLeaveRefId = false;

		timeTrackingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TimeTracking> toCacheModel() {
		TimeTrackingCacheModel timeTrackingCacheModel = new TimeTrackingCacheModel();

		timeTrackingCacheModel.timeTrackingId = getTimeTrackingId();

		timeTrackingCacheModel.empId = getEmpId();

		Date date = getDate();

		if (date != null) {
			timeTrackingCacheModel.date = date.getTime();
		}
		else {
			timeTrackingCacheModel.date = Long.MIN_VALUE;
		}

		Date in1 = getIn1();

		if (in1 != null) {
			timeTrackingCacheModel.in1 = in1.getTime();
		}
		else {
			timeTrackingCacheModel.in1 = Long.MIN_VALUE;
		}

		Date out1 = getOut1();

		if (out1 != null) {
			timeTrackingCacheModel.out1 = out1.getTime();
		}
		else {
			timeTrackingCacheModel.out1 = Long.MIN_VALUE;
		}

		Date in2 = getIn2();

		if (in2 != null) {
			timeTrackingCacheModel.in2 = in2.getTime();
		}
		else {
			timeTrackingCacheModel.in2 = Long.MIN_VALUE;
		}

		Date out2 = getOut2();

		if (out2 != null) {
			timeTrackingCacheModel.out2 = out2.getTime();
		}
		else {
			timeTrackingCacheModel.out2 = Long.MIN_VALUE;
		}

		Date in3 = getIn3();

		if (in3 != null) {
			timeTrackingCacheModel.in3 = in3.getTime();
		}
		else {
			timeTrackingCacheModel.in3 = Long.MIN_VALUE;
		}

		Date out3 = getOut3();

		if (out3 != null) {
			timeTrackingCacheModel.out3 = out3.getTime();
		}
		else {
			timeTrackingCacheModel.out3 = Long.MIN_VALUE;
		}

		timeTrackingCacheModel.groupId = getGroupId();

		timeTrackingCacheModel.companyId = getCompanyId();

		timeTrackingCacheModel.userId = getUserId();

		timeTrackingCacheModel.userName = getUserName();

		String userName = timeTrackingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			timeTrackingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			timeTrackingCacheModel.createDate = createDate.getTime();
		}
		else {
			timeTrackingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			timeTrackingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			timeTrackingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		timeTrackingCacheModel.leaveRefId = getLeaveRefId();

		return timeTrackingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{timeTrackingId=");
		sb.append(getTimeTrackingId());
		sb.append(", empId=");
		sb.append(getEmpId());
		sb.append(", date=");
		sb.append(getDate());
		sb.append(", in1=");
		sb.append(getIn1());
		sb.append(", out1=");
		sb.append(getOut1());
		sb.append(", in2=");
		sb.append(getIn2());
		sb.append(", out2=");
		sb.append(getOut2());
		sb.append(", in3=");
		sb.append(getIn3());
		sb.append(", out3=");
		sb.append(getOut3());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", leaveRefId=");
		sb.append(getLeaveRefId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("vn.com.ecopharma.hrm.tt.model.TimeTracking");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>timeTrackingId</column-name><column-value><![CDATA[");
		sb.append(getTimeTrackingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>empId</column-name><column-value><![CDATA[");
		sb.append(getEmpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>in1</column-name><column-value><![CDATA[");
		sb.append(getIn1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>out1</column-name><column-value><![CDATA[");
		sb.append(getOut1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>in2</column-name><column-value><![CDATA[");
		sb.append(getIn2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>out2</column-name><column-value><![CDATA[");
		sb.append(getOut2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>in3</column-name><column-value><![CDATA[");
		sb.append(getIn3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>out3</column-name><column-value><![CDATA[");
		sb.append(getOut3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveRefId</column-name><column-value><![CDATA[");
		sb.append(getLeaveRefId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TimeTracking.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TimeTracking.class
		};
	private long _timeTrackingId;
	private long _empId;
	private long _originalEmpId;
	private boolean _setOriginalEmpId;
	private Date _date;
	private Date _originalDate;
	private Date _in1;
	private Date _out1;
	private Date _in2;
	private Date _out2;
	private Date _in3;
	private Date _out3;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _leaveRefId;
	private long _originalLeaveRefId;
	private boolean _setOriginalLeaveRefId;
	private long _columnBitmask;
	private TimeTracking _escapedModel;
}