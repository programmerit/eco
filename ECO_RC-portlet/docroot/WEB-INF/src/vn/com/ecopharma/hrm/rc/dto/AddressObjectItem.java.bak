package vn.com.ecopharma.hrm.rc.dto;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import com.liferay.counter.service.CounterLocalServiceUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.Address;
import com.liferay.portal.model.Country;
import com.liferay.portal.model.Region;
import com.liferay.portal.service.AddressLocalServiceUtil;
import com.liferay.portal.service.RegionServiceUtil;

/**
 * @author TaoTran
 *
 */
public class AddressObjectItem implements Serializable {

	private static final long serialVersionUID = 1L;
	private Region selectedRegion;
	private Region region;
	private List<Region> regions;
	private Country country;
	private boolean UIDeleted;
	private Address address;

	public AddressObjectItem() {
		this.region = null;
		this.country = null;
		this.UIDeleted = false;
		this.regions = new ArrayList<Region>();
		this.address = createNewAddress();
	}

	public AddressObjectItem(Address address) {
		this.address = address;
		this.region = address.getRegion();
		this.country = address.getCountry();
		this.UIDeleted = false;
		this.regions = getRegionByCountryId(country.getCountryId());
	}

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	public Country getCountry() {
		return country;
	}

	public void setCountry(Country country) {
		this.country = country;
	}

	public Region getSelectedRegion() {
		return selectedRegion;
	}

	public void setSelectedRegion(Region selectedRegion) {
		this.selectedRegion = selectedRegion;
	}

	public Region getRegion() {
		return region;
	}

	public void setRegion(Region region) {
		this.region = region;
	}

	public boolean isUIDeleted() {
		return UIDeleted;
	}

	public void setUIDeleted(boolean uIDeleted) {
		UIDeleted = uIDeleted;
	}

	public List<Region> getRegions() {
		return regions;
	}

	public void setRegions(List<Region> regions) {
		this.regions = regions;
	}

	private final Address createNewAddress() {
		try {
			final long generatedId = CounterLocalServiceUtil.increment();
			return AddressLocalServiceUtil.createAddress(generatedId);
		} catch (SystemException e) {
			e.printStackTrace();
		}
		return null;
	}

	private List<Region> getRegionByCountryId(long countryId) {
		try {
			return RegionServiceUtil.getRegions(country.getCountryId());
		} catch (SystemException e) {
			e.printStackTrace();
		}
		return null;
	}
}
