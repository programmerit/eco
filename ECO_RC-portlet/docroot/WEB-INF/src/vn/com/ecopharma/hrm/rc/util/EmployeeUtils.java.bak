package vn.com.ecopharma.hrm.rc.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.portlet.PortletRequest;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;

import vn.com.ecopharma.emp.model.Employee;
import vn.com.ecopharma.emp.service.EmployeeLocalServiceUtil;
import vn.com.ecopharma.hrm.rc.dto.AddressObjectItem;
import vn.com.ecopharma.hrm.rc.model.Candidate;

import com.liferay.faces.portal.context.LiferayFacesContext;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.SearchContext;
import com.liferay.portal.kernel.search.SearchContextFactory;
import com.liferay.portal.model.Address;
import com.liferay.portal.model.ClassName;
import com.liferay.portal.service.AddressLocalServiceUtil;
import com.liferay.portal.service.ClassNameLocalServiceUtil;
import com.liferay.portal.util.PortalUtil;

/**
 * @author TaoTran
 *
 */
public class EmployeeUtils {

	/**
	 * @param documents
	 * @return
	 */
	/*
	 * public static List<EmployeeIndexedItem>
	 * getEmployeeIndexedItemsFromIndexedDocuments( List<Document> documents) {
	 * Document tempDoc = documents.get(0);
	 * 
	 * for (Map.Entry<String, Field> entry : tempDoc.getFields().entrySet()) {
	 * System.out.println(entry.getKey()); }
	 * 
	 * final List<EmployeeIndexedItem> results = new
	 * ArrayList<EmployeeIndexedItem>( documents.size()); for (final Document
	 * document : documents) { results.add(new EmployeeIndexedItem(document)); }
	 * return results; }
	 */

	/**
	 * @param clazzName
	 * @param primaryKey
	 * @param companyId
	 * @return
	 */
	public static List<AddressObjectItem> getAddressObjectItemsFromClassNameAndPK(
			String clazzName, long primaryKey, long companyId) {
		try {
			final List<AddressObjectItem> results = new ArrayList<AddressObjectItem>();
			ClassName className = ClassNameLocalServiceUtil
					.getClassName(clazzName);
			System.out.println(className.getClassNameId());

			for (Address address : AddressLocalServiceUtil.getAddresses(
					companyId, clazzName, primaryKey)) {
				System.out.println(address.getAddressId());
				results.add(new AddressObjectItem(address));
			}
			System.out.println(results.size());
			return results;
		} catch (SystemException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static String getFullName(Candidate candidate) {
		return candidate.getFirstName() + " " + candidate.getMiddleName() + " "
				+ candidate.getLastName();
	}

	/**
	 * @param items
	 * @return
	 */
	public static Map<Address, Boolean> transferAddressObjectListToAddressMap(
			List<AddressObjectItem> items) {
		final Map<Address, Boolean> resultMap = new HashMap<Address, Boolean>(
				items.size());
		for (AddressObjectItem item : items) {

			final Address address = item.getAddress();
			address.setCountryId(item.getCountry() != null ? item.getCountry()
					.getCountryId() : 0);
			address.setRegionId(item.getRegion() != null ? item.getRegion()
					.getRegionId() : 0);
			address.setZip("70000");
			resultMap.put(address, item.isUIDeleted());
		}
		return resultMap;
	}

	/**
	 * @return
	 */
	public static SearchContext getCurrentSearchContext() {
		final LiferayFacesContext liferayFacesContext = LiferayFacesContext
				.getInstance();

		final PortletRequest req = (PortletRequest) liferayFacesContext
				.getExternalContext().getRequest();

		final HttpServletRequest httpServletRequest = PortalUtil
				.getOriginalServletRequest(PortalUtil
						.getHttpServletRequest(req));
		final SearchContext searchContext = SearchContextFactory
				.getInstance(httpServletRequest);
		return searchContext;
	}

	/**
	 * @param fullname
	 * @return
	 */
	public static String getFirstNameFromFullname(String fullname) {
		return fullname.split(" ")[0];
	}

	/**
	 * @param fullname
	 * @return
	 */
	public static String getMiddleNameFromFullname(String fullname) {
		String[] fullnameArr = fullname.split(" ");
		int length = fullnameArr.length;
		// check if employee just have first and last name only
		if (length == 2) {
			return StringUtils.EMPTY;
		}
		String middleName = StringUtils.EMPTY;
		for (int i = 1; i < length - 1; i++) {
			middleName += fullnameArr[i] + " ";
		}
		return middleName;
	}

	/**
	 * @param fullname
	 * @return
	 */
	public static String getLastNameFromFullname(String fullname) {
		String[] fullnameArr = fullname.split(" ");
		return fullnameArr[fullnameArr.length - 1];
	}

	/**
	 * @param fullname
	 * @return
	 */
	public static String generateUsername(String fullname) {
		fullname = VNCharacterUtils.removeAccent(fullname).toLowerCase();
		StringBuilder resultBuilder = new StringBuilder();
		char firstChar = getFirstNameFromFullname(fullname).toCharArray()[0];

		String[] middleNameArr = getMiddleNameFromFullname(fullname).split(" ");
		char[] middleNameChars = new char[middleNameArr.length];
		for (int i = 0; i < middleNameChars.length; i++) {
			middleNameChars[i] = middleNameArr[i].charAt(0);
		}

		resultBuilder.append(firstChar);
		resultBuilder.append(middleNameChars);
		resultBuilder.append(getLastNameFromFullname(fullname));
		return resultBuilder.toString();
	}

	/**
	 * @param id
	 * @return
	 */
	public static Employee getEmployeeById(long id) {
		try {
			return EmployeeLocalServiceUtil.getEmployee(id);
		} catch (PortalException e) {
			e.printStackTrace();
		} catch (SystemException e) {
			e.printStackTrace();
		}
		return null;
	}
}
