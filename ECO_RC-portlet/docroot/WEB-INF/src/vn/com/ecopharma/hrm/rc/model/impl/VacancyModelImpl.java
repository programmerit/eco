/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.com.ecopharma.hrm.rc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.com.ecopharma.hrm.rc.model.Vacancy;
import vn.com.ecopharma.hrm.rc.model.VacancyModel;
import vn.com.ecopharma.hrm.rc.model.VacancySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Vacancy service. Represents a row in the &quot;eco_rcp_Vacancy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.rc.model.VacancyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VacancyImpl}.
 * </p>
 *
 * @author tvt
 * @see VacancyImpl
 * @see vn.com.ecopharma.hrm.rc.model.Vacancy
 * @see vn.com.ecopharma.hrm.rc.model.VacancyModel
 * @generated
 */
@JSON(strict = true)
public class VacancyModelImpl extends BaseModelImpl<Vacancy>
	implements VacancyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vacancy model instance should use the {@link vn.com.ecopharma.hrm.rc.model.Vacancy} interface instead.
	 */
	public static final String TABLE_NAME = "eco_rcp_Vacancy";
	public static final Object[][] TABLE_COLUMNS = {
			{ "vacancyId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "numberOfPosition", Types.INTEGER },
			{ "titlesId", Types.BIGINT },
			{ "status", Types.VARCHAR },
			{ "postedDate", Types.TIMESTAMP },
			{ "expiredDate", Types.TIMESTAMP },
			{ "deleted", Types.BOOLEAN },
			{ "description", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "code_", Types.VARCHAR },
			{ "certificateType", Types.VARCHAR },
			{ "experiences", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table eco_rcp_Vacancy (vacancyId LONG not null primary key,name VARCHAR(75) null,numberOfPosition INTEGER,titlesId LONG,status VARCHAR(75) null,postedDate DATE null,expiredDate DATE null,deleted BOOLEAN,description VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,code_ VARCHAR(75) null,certificateType VARCHAR(75) null,experiences DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table eco_rcp_Vacancy";
	public static final String ORDER_BY_JPQL = " ORDER BY vacancy.vacancyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eco_rcp_Vacancy.vacancyId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.com.ecopharma.hrm.rc.model.Vacancy"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.com.ecopharma.hrm.rc.model.Vacancy"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.com.ecopharma.hrm.rc.model.Vacancy"),
			true);
	public static long DELETED_COLUMN_BITMASK = 1L;
	public static long NAME_COLUMN_BITMASK = 2L;
	public static long VACANCYID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Vacancy toModel(VacancySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Vacancy model = new VacancyImpl();

		model.setVacancyId(soapModel.getVacancyId());
		model.setName(soapModel.getName());
		model.setNumberOfPosition(soapModel.getNumberOfPosition());
		model.setTitlesId(soapModel.getTitlesId());
		model.setStatus(soapModel.getStatus());
		model.setPostedDate(soapModel.getPostedDate());
		model.setExpiredDate(soapModel.getExpiredDate());
		model.setDeleted(soapModel.getDeleted());
		model.setDescription(soapModel.getDescription());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCode(soapModel.getCode());
		model.setCertificateType(soapModel.getCertificateType());
		model.setExperiences(soapModel.getExperiences());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Vacancy> toModels(VacancySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Vacancy> models = new ArrayList<Vacancy>(soapModels.length);

		for (VacancySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.com.ecopharma.hrm.rc.model.Vacancy"));

	public VacancyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _vacancyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVacancyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _vacancyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Vacancy.class;
	}

	@Override
	public String getModelClassName() {
		return Vacancy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("vacancyId", getVacancyId());
		attributes.put("name", getName());
		attributes.put("numberOfPosition", getNumberOfPosition());
		attributes.put("titlesId", getTitlesId());
		attributes.put("status", getStatus());
		attributes.put("postedDate", getPostedDate());
		attributes.put("expiredDate", getExpiredDate());
		attributes.put("deleted", getDeleted());
		attributes.put("description", getDescription());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("code", getCode());
		attributes.put("certificateType", getCertificateType());
		attributes.put("experiences", getExperiences());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long vacancyId = (Long)attributes.get("vacancyId");

		if (vacancyId != null) {
			setVacancyId(vacancyId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Integer numberOfPosition = (Integer)attributes.get("numberOfPosition");

		if (numberOfPosition != null) {
			setNumberOfPosition(numberOfPosition);
		}

		Long titlesId = (Long)attributes.get("titlesId");

		if (titlesId != null) {
			setTitlesId(titlesId);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date postedDate = (Date)attributes.get("postedDate");

		if (postedDate != null) {
			setPostedDate(postedDate);
		}

		Date expiredDate = (Date)attributes.get("expiredDate");

		if (expiredDate != null) {
			setExpiredDate(expiredDate);
		}

		Boolean deleted = (Boolean)attributes.get("deleted");

		if (deleted != null) {
			setDeleted(deleted);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String certificateType = (String)attributes.get("certificateType");

		if (certificateType != null) {
			setCertificateType(certificateType);
		}

		Double experiences = (Double)attributes.get("experiences");

		if (experiences != null) {
			setExperiences(experiences);
		}
	}

	@JSON
	@Override
	public long getVacancyId() {
		return _vacancyId;
	}

	@Override
	public void setVacancyId(long vacancyId) {
		_vacancyId = vacancyId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public int getNumberOfPosition() {
		return _numberOfPosition;
	}

	@Override
	public void setNumberOfPosition(int numberOfPosition) {
		_numberOfPosition = numberOfPosition;
	}

	@JSON
	@Override
	public long getTitlesId() {
		return _titlesId;
	}

	@Override
	public void setTitlesId(long titlesId) {
		_titlesId = titlesId;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public Date getPostedDate() {
		return _postedDate;
	}

	@Override
	public void setPostedDate(Date postedDate) {
		_postedDate = postedDate;
	}

	@JSON
	@Override
	public Date getExpiredDate() {
		return _expiredDate;
	}

	@Override
	public void setExpiredDate(Date expiredDate) {
		_expiredDate = expiredDate;
	}

	@JSON
	@Override
	public boolean getDeleted() {
		return _deleted;
	}

	@Override
	public boolean isDeleted() {
		return _deleted;
	}

	@Override
	public void setDeleted(boolean deleted) {
		_columnBitmask |= DELETED_COLUMN_BITMASK;

		if (!_setOriginalDeleted) {
			_setOriginalDeleted = true;

			_originalDeleted = _deleted;
		}

		_deleted = deleted;
	}

	public boolean getOriginalDeleted() {
		return _originalDeleted;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@JSON
	@Override
	public String getCertificateType() {
		if (_certificateType == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateType;
		}
	}

	@Override
	public void setCertificateType(String certificateType) {
		_certificateType = certificateType;
	}

	@JSON
	@Override
	public double getExperiences() {
		return _experiences;
	}

	@Override
	public void setExperiences(double experiences) {
		_experiences = experiences;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Vacancy.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Vacancy toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Vacancy)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VacancyImpl vacancyImpl = new VacancyImpl();

		vacancyImpl.setVacancyId(getVacancyId());
		vacancyImpl.setName(getName());
		vacancyImpl.setNumberOfPosition(getNumberOfPosition());
		vacancyImpl.setTitlesId(getTitlesId());
		vacancyImpl.setStatus(getStatus());
		vacancyImpl.setPostedDate(getPostedDate());
		vacancyImpl.setExpiredDate(getExpiredDate());
		vacancyImpl.setDeleted(getDeleted());
		vacancyImpl.setDescription(getDescription());
		vacancyImpl.setGroupId(getGroupId());
		vacancyImpl.setCompanyId(getCompanyId());
		vacancyImpl.setUserId(getUserId());
		vacancyImpl.setUserName(getUserName());
		vacancyImpl.setCreateDate(getCreateDate());
		vacancyImpl.setModifiedDate(getModifiedDate());
		vacancyImpl.setCode(getCode());
		vacancyImpl.setCertificateType(getCertificateType());
		vacancyImpl.setExperiences(getExperiences());

		vacancyImpl.resetOriginalValues();

		return vacancyImpl;
	}

	@Override
	public int compareTo(Vacancy vacancy) {
		long primaryKey = vacancy.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Vacancy)) {
			return false;
		}

		Vacancy vacancy = (Vacancy)obj;

		long primaryKey = vacancy.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VacancyModelImpl vacancyModelImpl = this;

		vacancyModelImpl._originalName = vacancyModelImpl._name;

		vacancyModelImpl._originalDeleted = vacancyModelImpl._deleted;

		vacancyModelImpl._setOriginalDeleted = false;

		vacancyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Vacancy> toCacheModel() {
		VacancyCacheModel vacancyCacheModel = new VacancyCacheModel();

		vacancyCacheModel.vacancyId = getVacancyId();

		vacancyCacheModel.name = getName();

		String name = vacancyCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			vacancyCacheModel.name = null;
		}

		vacancyCacheModel.numberOfPosition = getNumberOfPosition();

		vacancyCacheModel.titlesId = getTitlesId();

		vacancyCacheModel.status = getStatus();

		String status = vacancyCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			vacancyCacheModel.status = null;
		}

		Date postedDate = getPostedDate();

		if (postedDate != null) {
			vacancyCacheModel.postedDate = postedDate.getTime();
		}
		else {
			vacancyCacheModel.postedDate = Long.MIN_VALUE;
		}

		Date expiredDate = getExpiredDate();

		if (expiredDate != null) {
			vacancyCacheModel.expiredDate = expiredDate.getTime();
		}
		else {
			vacancyCacheModel.expiredDate = Long.MIN_VALUE;
		}

		vacancyCacheModel.deleted = getDeleted();

		vacancyCacheModel.description = getDescription();

		String description = vacancyCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			vacancyCacheModel.description = null;
		}

		vacancyCacheModel.groupId = getGroupId();

		vacancyCacheModel.companyId = getCompanyId();

		vacancyCacheModel.userId = getUserId();

		vacancyCacheModel.userName = getUserName();

		String userName = vacancyCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			vacancyCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			vacancyCacheModel.createDate = createDate.getTime();
		}
		else {
			vacancyCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			vacancyCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			vacancyCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		vacancyCacheModel.code = getCode();

		String code = vacancyCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			vacancyCacheModel.code = null;
		}

		vacancyCacheModel.certificateType = getCertificateType();

		String certificateType = vacancyCacheModel.certificateType;

		if ((certificateType != null) && (certificateType.length() == 0)) {
			vacancyCacheModel.certificateType = null;
		}

		vacancyCacheModel.experiences = getExperiences();

		return vacancyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{vacancyId=");
		sb.append(getVacancyId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", numberOfPosition=");
		sb.append(getNumberOfPosition());
		sb.append(", titlesId=");
		sb.append(getTitlesId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", postedDate=");
		sb.append(getPostedDate());
		sb.append(", expiredDate=");
		sb.append(getExpiredDate());
		sb.append(", deleted=");
		sb.append(getDeleted());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", certificateType=");
		sb.append(getCertificateType());
		sb.append(", experiences=");
		sb.append(getExperiences());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("vn.com.ecopharma.hrm.rc.model.Vacancy");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>vacancyId</column-name><column-value><![CDATA[");
		sb.append(getVacancyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfPosition</column-name><column-value><![CDATA[");
		sb.append(getNumberOfPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titlesId</column-name><column-value><![CDATA[");
		sb.append(getTitlesId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postedDate</column-name><column-value><![CDATA[");
		sb.append(getPostedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredDate</column-name><column-value><![CDATA[");
		sb.append(getExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deleted</column-name><column-value><![CDATA[");
		sb.append(getDeleted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateType</column-name><column-value><![CDATA[");
		sb.append(getCertificateType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>experiences</column-name><column-value><![CDATA[");
		sb.append(getExperiences());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Vacancy.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Vacancy.class
		};
	private long _vacancyId;
	private String _name;
	private String _originalName;
	private int _numberOfPosition;
	private long _titlesId;
	private String _status;
	private Date _postedDate;
	private Date _expiredDate;
	private boolean _deleted;
	private boolean _originalDeleted;
	private boolean _setOriginalDeleted;
	private String _description;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _code;
	private String _certificateType;
	private double _experiences;
	private long _columnBitmask;
	private Vacancy _escapedModel;
}