/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.com.ecopharma.hrm.rc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.com.ecopharma.hrm.rc.model.Experience;
import vn.com.ecopharma.hrm.rc.model.ExperienceModel;
import vn.com.ecopharma.hrm.rc.model.ExperienceSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Experience service. Represents a row in the &quot;eco_rcp_Experience&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.com.ecopharma.hrm.rc.model.ExperienceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExperienceImpl}.
 * </p>
 *
 * @author tvt
 * @see ExperienceImpl
 * @see vn.com.ecopharma.hrm.rc.model.Experience
 * @see vn.com.ecopharma.hrm.rc.model.ExperienceModel
 * @generated
 */
@JSON(strict = true)
public class ExperienceModelImpl extends BaseModelImpl<Experience>
	implements ExperienceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a experience model instance should use the {@link vn.com.ecopharma.hrm.rc.model.Experience} interface instead.
	 */
	public static final String TABLE_NAME = "eco_rcp_Experience";
	public static final Object[][] TABLE_COLUMNS = {
			{ "experienceId", Types.BIGINT },
			{ "className", Types.VARCHAR },
			{ "classPK", Types.BIGINT },
			{ "companyName", Types.VARCHAR },
			{ "workingPlace", Types.VARCHAR },
			{ "yearsExperience", Types.DOUBLE },
			{ "tel", Types.VARCHAR },
			{ "workingFrom", Types.TIMESTAMP },
			{ "workingTo", Types.TIMESTAMP },
			{ "initialTitles", Types.VARCHAR },
			{ "finalTitles", Types.VARCHAR },
			{ "initialSalary", Types.DOUBLE },
			{ "finalSalary", Types.DOUBLE },
			{ "field", Types.VARCHAR },
			{ "manager", Types.VARCHAR },
			{ "responsibility", Types.VARCHAR },
			{ "resignedReason", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table eco_rcp_Experience (experienceId LONG not null primary key,className VARCHAR(75) null,classPK LONG,companyName VARCHAR(75) null,workingPlace VARCHAR(75) null,yearsExperience DOUBLE,tel VARCHAR(75) null,workingFrom DATE null,workingTo DATE null,initialTitles VARCHAR(75) null,finalTitles VARCHAR(75) null,initialSalary DOUBLE,finalSalary DOUBLE,field VARCHAR(75) null,manager VARCHAR(75) null,responsibility VARCHAR(75) null,resignedReason VARCHAR(75) null,description VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table eco_rcp_Experience";
	public static final String ORDER_BY_JPQL = " ORDER BY experience.experienceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eco_rcp_Experience.experienceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.com.ecopharma.hrm.rc.model.Experience"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.com.ecopharma.hrm.rc.model.Experience"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.com.ecopharma.hrm.rc.model.Experience"),
			true);
	public static long CLASSNAME_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long EXPERIENCEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Experience toModel(ExperienceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Experience model = new ExperienceImpl();

		model.setExperienceId(soapModel.getExperienceId());
		model.setClassName(soapModel.getClassName());
		model.setClassPK(soapModel.getClassPK());
		model.setCompanyName(soapModel.getCompanyName());
		model.setWorkingPlace(soapModel.getWorkingPlace());
		model.setYearsExperience(soapModel.getYearsExperience());
		model.setTel(soapModel.getTel());
		model.setWorkingFrom(soapModel.getWorkingFrom());
		model.setWorkingTo(soapModel.getWorkingTo());
		model.setInitialTitles(soapModel.getInitialTitles());
		model.setFinalTitles(soapModel.getFinalTitles());
		model.setInitialSalary(soapModel.getInitialSalary());
		model.setFinalSalary(soapModel.getFinalSalary());
		model.setField(soapModel.getField());
		model.setManager(soapModel.getManager());
		model.setResponsibility(soapModel.getResponsibility());
		model.setResignedReason(soapModel.getResignedReason());
		model.setDescription(soapModel.getDescription());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Experience> toModels(ExperienceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Experience> models = new ArrayList<Experience>(soapModels.length);

		for (ExperienceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.com.ecopharma.hrm.rc.model.Experience"));

	public ExperienceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _experienceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExperienceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _experienceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Experience.class;
	}

	@Override
	public String getModelClassName() {
		return Experience.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("experienceId", getExperienceId());
		attributes.put("className", getClassName());
		attributes.put("classPK", getClassPK());
		attributes.put("companyName", getCompanyName());
		attributes.put("workingPlace", getWorkingPlace());
		attributes.put("yearsExperience", getYearsExperience());
		attributes.put("tel", getTel());
		attributes.put("workingFrom", getWorkingFrom());
		attributes.put("workingTo", getWorkingTo());
		attributes.put("initialTitles", getInitialTitles());
		attributes.put("finalTitles", getFinalTitles());
		attributes.put("initialSalary", getInitialSalary());
		attributes.put("finalSalary", getFinalSalary());
		attributes.put("field", getField());
		attributes.put("manager", getManager());
		attributes.put("responsibility", getResponsibility());
		attributes.put("resignedReason", getResignedReason());
		attributes.put("description", getDescription());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long experienceId = (Long)attributes.get("experienceId");

		if (experienceId != null) {
			setExperienceId(experienceId);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String companyName = (String)attributes.get("companyName");

		if (companyName != null) {
			setCompanyName(companyName);
		}

		String workingPlace = (String)attributes.get("workingPlace");

		if (workingPlace != null) {
			setWorkingPlace(workingPlace);
		}

		Double yearsExperience = (Double)attributes.get("yearsExperience");

		if (yearsExperience != null) {
			setYearsExperience(yearsExperience);
		}

		String tel = (String)attributes.get("tel");

		if (tel != null) {
			setTel(tel);
		}

		Date workingFrom = (Date)attributes.get("workingFrom");

		if (workingFrom != null) {
			setWorkingFrom(workingFrom);
		}

		Date workingTo = (Date)attributes.get("workingTo");

		if (workingTo != null) {
			setWorkingTo(workingTo);
		}

		String initialTitles = (String)attributes.get("initialTitles");

		if (initialTitles != null) {
			setInitialTitles(initialTitles);
		}

		String finalTitles = (String)attributes.get("finalTitles");

		if (finalTitles != null) {
			setFinalTitles(finalTitles);
		}

		Double initialSalary = (Double)attributes.get("initialSalary");

		if (initialSalary != null) {
			setInitialSalary(initialSalary);
		}

		Double finalSalary = (Double)attributes.get("finalSalary");

		if (finalSalary != null) {
			setFinalSalary(finalSalary);
		}

		String field = (String)attributes.get("field");

		if (field != null) {
			setField(field);
		}

		String manager = (String)attributes.get("manager");

		if (manager != null) {
			setManager(manager);
		}

		String responsibility = (String)attributes.get("responsibility");

		if (responsibility != null) {
			setResponsibility(responsibility);
		}

		String resignedReason = (String)attributes.get("resignedReason");

		if (resignedReason != null) {
			setResignedReason(resignedReason);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getExperienceId() {
		return _experienceId;
	}

	@Override
	public void setExperienceId(long experienceId) {
		_experienceId = experienceId;
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassName == null) {
			_originalClassName = _className;
		}

		_className = className;
	}

	public String getOriginalClassName() {
		return GetterUtil.getString(_originalClassName);
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		_companyName = companyName;
	}

	@JSON
	@Override
	public String getWorkingPlace() {
		if (_workingPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _workingPlace;
		}
	}

	@Override
	public void setWorkingPlace(String workingPlace) {
		_workingPlace = workingPlace;
	}

	@JSON
	@Override
	public double getYearsExperience() {
		return _yearsExperience;
	}

	@Override
	public void setYearsExperience(double yearsExperience) {
		_yearsExperience = yearsExperience;
	}

	@JSON
	@Override
	public String getTel() {
		if (_tel == null) {
			return StringPool.BLANK;
		}
		else {
			return _tel;
		}
	}

	@Override
	public void setTel(String tel) {
		_tel = tel;
	}

	@JSON
	@Override
	public Date getWorkingFrom() {
		return _workingFrom;
	}

	@Override
	public void setWorkingFrom(Date workingFrom) {
		_workingFrom = workingFrom;
	}

	@JSON
	@Override
	public Date getWorkingTo() {
		return _workingTo;
	}

	@Override
	public void setWorkingTo(Date workingTo) {
		_workingTo = workingTo;
	}

	@JSON
	@Override
	public String getInitialTitles() {
		if (_initialTitles == null) {
			return StringPool.BLANK;
		}
		else {
			return _initialTitles;
		}
	}

	@Override
	public void setInitialTitles(String initialTitles) {
		_initialTitles = initialTitles;
	}

	@JSON
	@Override
	public String getFinalTitles() {
		if (_finalTitles == null) {
			return StringPool.BLANK;
		}
		else {
			return _finalTitles;
		}
	}

	@Override
	public void setFinalTitles(String finalTitles) {
		_finalTitles = finalTitles;
	}

	@JSON
	@Override
	public double getInitialSalary() {
		return _initialSalary;
	}

	@Override
	public void setInitialSalary(double initialSalary) {
		_initialSalary = initialSalary;
	}

	@JSON
	@Override
	public double getFinalSalary() {
		return _finalSalary;
	}

	@Override
	public void setFinalSalary(double finalSalary) {
		_finalSalary = finalSalary;
	}

	@JSON
	@Override
	public String getField() {
		if (_field == null) {
			return StringPool.BLANK;
		}
		else {
			return _field;
		}
	}

	@Override
	public void setField(String field) {
		_field = field;
	}

	@JSON
	@Override
	public String getManager() {
		if (_manager == null) {
			return StringPool.BLANK;
		}
		else {
			return _manager;
		}
	}

	@Override
	public void setManager(String manager) {
		_manager = manager;
	}

	@JSON
	@Override
	public String getResponsibility() {
		if (_responsibility == null) {
			return StringPool.BLANK;
		}
		else {
			return _responsibility;
		}
	}

	@Override
	public void setResponsibility(String responsibility) {
		_responsibility = responsibility;
	}

	@JSON
	@Override
	public String getResignedReason() {
		if (_resignedReason == null) {
			return StringPool.BLANK;
		}
		else {
			return _resignedReason;
		}
	}

	@Override
	public void setResignedReason(String resignedReason) {
		_resignedReason = resignedReason;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Experience.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Experience toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Experience)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExperienceImpl experienceImpl = new ExperienceImpl();

		experienceImpl.setExperienceId(getExperienceId());
		experienceImpl.setClassName(getClassName());
		experienceImpl.setClassPK(getClassPK());
		experienceImpl.setCompanyName(getCompanyName());
		experienceImpl.setWorkingPlace(getWorkingPlace());
		experienceImpl.setYearsExperience(getYearsExperience());
		experienceImpl.setTel(getTel());
		experienceImpl.setWorkingFrom(getWorkingFrom());
		experienceImpl.setWorkingTo(getWorkingTo());
		experienceImpl.setInitialTitles(getInitialTitles());
		experienceImpl.setFinalTitles(getFinalTitles());
		experienceImpl.setInitialSalary(getInitialSalary());
		experienceImpl.setFinalSalary(getFinalSalary());
		experienceImpl.setField(getField());
		experienceImpl.setManager(getManager());
		experienceImpl.setResponsibility(getResponsibility());
		experienceImpl.setResignedReason(getResignedReason());
		experienceImpl.setDescription(getDescription());
		experienceImpl.setGroupId(getGroupId());
		experienceImpl.setCompanyId(getCompanyId());
		experienceImpl.setUserId(getUserId());
		experienceImpl.setUserName(getUserName());
		experienceImpl.setCreateDate(getCreateDate());
		experienceImpl.setModifiedDate(getModifiedDate());

		experienceImpl.resetOriginalValues();

		return experienceImpl;
	}

	@Override
	public int compareTo(Experience experience) {
		long primaryKey = experience.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Experience)) {
			return false;
		}

		Experience experience = (Experience)obj;

		long primaryKey = experience.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ExperienceModelImpl experienceModelImpl = this;

		experienceModelImpl._originalClassName = experienceModelImpl._className;

		experienceModelImpl._originalClassPK = experienceModelImpl._classPK;

		experienceModelImpl._setOriginalClassPK = false;

		experienceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Experience> toCacheModel() {
		ExperienceCacheModel experienceCacheModel = new ExperienceCacheModel();

		experienceCacheModel.experienceId = getExperienceId();

		experienceCacheModel.className = getClassName();

		String className = experienceCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			experienceCacheModel.className = null;
		}

		experienceCacheModel.classPK = getClassPK();

		experienceCacheModel.companyName = getCompanyName();

		String companyName = experienceCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			experienceCacheModel.companyName = null;
		}

		experienceCacheModel.workingPlace = getWorkingPlace();

		String workingPlace = experienceCacheModel.workingPlace;

		if ((workingPlace != null) && (workingPlace.length() == 0)) {
			experienceCacheModel.workingPlace = null;
		}

		experienceCacheModel.yearsExperience = getYearsExperience();

		experienceCacheModel.tel = getTel();

		String tel = experienceCacheModel.tel;

		if ((tel != null) && (tel.length() == 0)) {
			experienceCacheModel.tel = null;
		}

		Date workingFrom = getWorkingFrom();

		if (workingFrom != null) {
			experienceCacheModel.workingFrom = workingFrom.getTime();
		}
		else {
			experienceCacheModel.workingFrom = Long.MIN_VALUE;
		}

		Date workingTo = getWorkingTo();

		if (workingTo != null) {
			experienceCacheModel.workingTo = workingTo.getTime();
		}
		else {
			experienceCacheModel.workingTo = Long.MIN_VALUE;
		}

		experienceCacheModel.initialTitles = getInitialTitles();

		String initialTitles = experienceCacheModel.initialTitles;

		if ((initialTitles != null) && (initialTitles.length() == 0)) {
			experienceCacheModel.initialTitles = null;
		}

		experienceCacheModel.finalTitles = getFinalTitles();

		String finalTitles = experienceCacheModel.finalTitles;

		if ((finalTitles != null) && (finalTitles.length() == 0)) {
			experienceCacheModel.finalTitles = null;
		}

		experienceCacheModel.initialSalary = getInitialSalary();

		experienceCacheModel.finalSalary = getFinalSalary();

		experienceCacheModel.field = getField();

		String field = experienceCacheModel.field;

		if ((field != null) && (field.length() == 0)) {
			experienceCacheModel.field = null;
		}

		experienceCacheModel.manager = getManager();

		String manager = experienceCacheModel.manager;

		if ((manager != null) && (manager.length() == 0)) {
			experienceCacheModel.manager = null;
		}

		experienceCacheModel.responsibility = getResponsibility();

		String responsibility = experienceCacheModel.responsibility;

		if ((responsibility != null) && (responsibility.length() == 0)) {
			experienceCacheModel.responsibility = null;
		}

		experienceCacheModel.resignedReason = getResignedReason();

		String resignedReason = experienceCacheModel.resignedReason;

		if ((resignedReason != null) && (resignedReason.length() == 0)) {
			experienceCacheModel.resignedReason = null;
		}

		experienceCacheModel.description = getDescription();

		String description = experienceCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			experienceCacheModel.description = null;
		}

		experienceCacheModel.groupId = getGroupId();

		experienceCacheModel.companyId = getCompanyId();

		experienceCacheModel.userId = getUserId();

		experienceCacheModel.userName = getUserName();

		String userName = experienceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			experienceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			experienceCacheModel.createDate = createDate.getTime();
		}
		else {
			experienceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			experienceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			experienceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return experienceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{experienceId=");
		sb.append(getExperienceId());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", companyName=");
		sb.append(getCompanyName());
		sb.append(", workingPlace=");
		sb.append(getWorkingPlace());
		sb.append(", yearsExperience=");
		sb.append(getYearsExperience());
		sb.append(", tel=");
		sb.append(getTel());
		sb.append(", workingFrom=");
		sb.append(getWorkingFrom());
		sb.append(", workingTo=");
		sb.append(getWorkingTo());
		sb.append(", initialTitles=");
		sb.append(getInitialTitles());
		sb.append(", finalTitles=");
		sb.append(getFinalTitles());
		sb.append(", initialSalary=");
		sb.append(getInitialSalary());
		sb.append(", finalSalary=");
		sb.append(getFinalSalary());
		sb.append(", field=");
		sb.append(getField());
		sb.append(", manager=");
		sb.append(getManager());
		sb.append(", responsibility=");
		sb.append(getResponsibility());
		sb.append(", resignedReason=");
		sb.append(getResignedReason());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("vn.com.ecopharma.hrm.rc.model.Experience");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>experienceId</column-name><column-value><![CDATA[");
		sb.append(getExperienceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyName</column-name><column-value><![CDATA[");
		sb.append(getCompanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workingPlace</column-name><column-value><![CDATA[");
		sb.append(getWorkingPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>yearsExperience</column-name><column-value><![CDATA[");
		sb.append(getYearsExperience());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tel</column-name><column-value><![CDATA[");
		sb.append(getTel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workingFrom</column-name><column-value><![CDATA[");
		sb.append(getWorkingFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workingTo</column-name><column-value><![CDATA[");
		sb.append(getWorkingTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>initialTitles</column-name><column-value><![CDATA[");
		sb.append(getInitialTitles());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>finalTitles</column-name><column-value><![CDATA[");
		sb.append(getFinalTitles());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>initialSalary</column-name><column-value><![CDATA[");
		sb.append(getInitialSalary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>finalSalary</column-name><column-value><![CDATA[");
		sb.append(getFinalSalary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>field</column-name><column-value><![CDATA[");
		sb.append(getField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manager</column-name><column-value><![CDATA[");
		sb.append(getManager());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>responsibility</column-name><column-value><![CDATA[");
		sb.append(getResponsibility());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resignedReason</column-name><column-value><![CDATA[");
		sb.append(getResignedReason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Experience.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Experience.class
		};
	private long _experienceId;
	private String _className;
	private String _originalClassName;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private String _companyName;
	private String _workingPlace;
	private double _yearsExperience;
	private String _tel;
	private Date _workingFrom;
	private Date _workingTo;
	private String _initialTitles;
	private String _finalTitles;
	private double _initialSalary;
	private double _finalSalary;
	private String _field;
	private String _manager;
	private String _responsibility;
	private String _resignedReason;
	private String _description;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private Experience _escapedModel;
}